just_dog_adoptions=adoptions%>%
filter(animal_type=="DOG")%>%
mutate(animal_breed=as.factor(animal_breed))%>%
mutate(healthy_intake=ifelse(grepl("^HEALTHY.*",intake_condition),1,0),
contagious_intake=ifelse(grepl(".*[^NON-]CONTAGIOUS", intake_condition),1,0),
untreatable_intake=ifelse(grepl(".*(UNTREATABLE).*", intake_condition),1,0),
treatable_intake=ifelse(grepl("^TREATABLE.*", intake_condition),1,0),
manageable_intake=ifelse(grepl(".*MANAGEABLE.*", intake_condition),1,0),
rehabitable_intake=ifelse(grepl(".*REHABILITABLE.*", intake_condition),1,0),
normal_intake=ifelse(grepl(".*NORMAL.*", intake_condition),1,0),
chip_status = ifelse(chip_status=="SCAN CHIP", 1, 0))%>%
mutate(out_dead = outcome_type %in% c("DEAD ON ARRIVAL", "EUTHANIZED", "DIED"),
summer = ifelse(month %in% c(5, 6, 7, 8, 9), 1, 0))
mod.1=glmer(adopted~1+(1|animal_breed), data=just_dog_adoptions, family = "binomial")
summary(mod.1)
mod.1=glmer(adopted~1+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.1)
mod.2.adopted=glmer(adopted~summer+chip_status+treatable_intake+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.2.adopted)
mod.2.dead=glmer(out_dead~summer+chip_status+treatable_intake+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.2.dead)
# Be sure to install these packages if necessary
library(MASS)
library(mnormt)
library(lme4)
# library(HLMdiag)
library(gridExtra)
library(tidyverse)
music <- read_csv("~/Stats 316 S19/Class/Data/musicdata.csv")
music %>% count(id)    # number of diary entries for each subject
music %>% count(diary) # number of subjects with diary entry of a given number
select <- dplyr::select
keydata <- music %>%
dplyr::select(id, diary, perform_type, memory, audience, na, gender, instrument,
mpqab, mpqpem, mpqnem)
keydata
# Create Level2 data set by picking off one observation per subject
#  - should be 37 rows and 6 columns (one per L2 variable)
music.lev2 <-  keydata %>%
group_by(id) %>%
filter(row_number() == 1) %>%
select(id, gender:mpqnem)
# Add average across all performances for each subject for EDA plots
meanbysubj <- music %>% group_by(id) %>%
summarise(meanbysubj = mean(na, na.rm = TRUE))
music.lev2 <- music.lev2 %>%
left_join(meanbysubj, by = "id")
# Summarize Level 1 covariates (and responses) by ignoring within subject
#   correlation and pretending all observations are independent
music %>% count(perform_type)
music %>% count(memory)
music %>% count(audience)
# create ggplot theme for plots
# theme with grid, grey background
theme.1 <- theme(axis.title.x = element_text(size = 14),
axis.title.y = element_text(size = 14),
plot.title=element_text(hjust=.9,face="italic",size=12))
theme1 <- theme(axis.line = element_line(size = .5, color = "black"),
panel.background = element_rect(fill="white"),
panel.grid.major = element_blank(),panel.grid.minor = element_blank(),
axis.title.x = element_text(size = 14),axis.title.y = element_text(size = 14),
plot.title=element_text(hjust=.9,face="italic",size=12))
## Histogram of negative affect frequencies
na.all <- ggplot(data=music,aes(x=na)) +
geom_histogram(binwidth = 2, fill = "white",color = "black") +
theme.1 + xlim(10,35) +
xlab("Negative Affect") + ylab("Frequency") + labs(title="(a)")
na.mean <- ggplot(data=music.lev2,aes(x=meanbysubj)) +
geom_histogram(binwidth = 2, fill = "white", color = "black") +
theme.1 + xlim(10,35) +
xlab("Mean Negative Affect") + ylab("Frequency") + labs(title="(b)")
mli.hist1 <- grid.arrange(na.all,na.mean,ncol=1)
# Summarize Level 2 covariates using data set with one observation per subject,
music.lev2 %>% ungroup(id) %>% count(gender)
music.lev2 %>% ungroup(id) %>% count(instrument)
nem1 <- ggplot(data=music.lev2,aes(x=mpqnem)) +
geom_histogram(binwidth = 5, fill = "white",color = "black") + theme.1 +
xlab("NEM") + ylab("Frequency") + labs(title="(a)")
pem1 <- ggplot(data=music.lev2,aes(x=mpqpem)) +
geom_histogram(binwidth = 5, fill = "white", color = "black") + theme.1 +
xlab("PEM") + ylab("") + labs(title="(b)")
abs <- ggplot(data=music.lev2,aes(x=mpqab)) +
geom_histogram(binwidth = 5, fill = "white", color = "black ") + theme.1 +
xlab("Absorption") + ylab("") + labs(title="(c)")
mli.histmat1 <- grid.arrange(nem1,pem1,abs,ncol=3)
# Look at relationships among Level 1 covariates and primary response
#   (again ignoring correlation).  Boxplots for categorical covariates and
#   scatterplots and lattice plot for continuous covariates.
# boxplot of negative affect by performance type
box.perform <- ggplot(data=music,aes(factor(perform_type),na)) + geom_boxplot() +
theme.1 + coord_flip() + ylab("Negative affect") + xlab("") + labs(title="(a)")
# boxplot of negative affect by audience
box.audience <- ggplot(data=music,aes(factor(audience),na)) + geom_boxplot() +
theme.1 + coord_flip() +  ylab("Negative affect") + xlab("") + labs(title="(b)")
# scatterplot of negative affect versus number of previous performances
## flip coordinates
scatter.previous <- ggplot(data=music, aes(x=previous,y=na)) + geom_point() +
theme.1 + geom_smooth(method="lm",color="black") + ylab("Negative affect") +
xlab("Previous Performances") + labs(title="(c)")
# all three together
mli.boxscatmat1 <- grid.arrange(box.perform,box.audience,scatter.previous,ncol=2)
# Lattice plot for NA vs. Performance Type
ggplot(music,aes(x=factor(perform_type),y=na)) + theme.1 +
geom_dotplot(binaxis="y",stackdir="center",binwidth=25/30) + facet_wrap(~id,ncol=5) +
theme(strip.text.x=element_blank()) + coord_flip() +
labs(x="Performance Type",y="Negative Affect")
# Lattice plot for NA vs. Audience
ggplot(music,aes(x=factor(audience),y=na)) + theme.1 +
geom_dotplot(binaxis="y",stackdir="center",binwidth=25/30) + facet_wrap(~id,ncol=5) +
theme(strip.text.x=element_blank()) + coord_flip() +
labs(x="Audience",y="Negative Affect")
# Lattice plot for NA vs. Previous Performances
ggplot(music,aes(x=previous,y=na)) + theme.1 +
geom_point() + geom_smooth(method="lm",color="black") + facet_wrap(~id,ncol=5) +
theme(strip.text.x=element_blank()) + ylim(10,35) +
labs(x="Previous Performances",y="Negative Affect")
# Look at relationships among Level 2 covariates and negative affect
#   (again ignoring correlation)
instr.all <- ggplot(data=music,aes(factor(instrument),na)) + geom_boxplot() +
coord_flip() + theme.1 + ylab("Negative Affect") + xlab("") + labs(title="(a)") +
ylim(10,35)
instr.mean <- ggplot(data=music.lev2,aes(factor(instrument),meanbysubj)) +
geom_boxplot() + coord_flip() + theme.1 + ylab("Mean Negative Affect") + xlab("") +
labs(title="(b)") + ylim(10,35)
mli.boxmat1 <- grid.arrange(instr.all,instr.mean,ncol=1)
just_dog_adoptions %>%
group_by(council_district)%>%
ggplot(aes(x=council_district, y = out_dead)) +
geom_bar()
just_dog_adoptions %>%
group_by(council_district)%>%
ggplot(aes(x=council_district)) +
geom_bar()
ggplot(aes(x=as.factor(council_district)) +
just_dog_adoptions %>%
group_by(council_district)%>%
ggplot(aes(x=as.factor(council_district))) +
geom_bar()
just_dog_adoptions %>%
just_dog_adoptions %>%
group_by(council_district)%>%
ggplot(aes(x=as.factor(council_district), y = out_dead)) +
geom_bar()
just_dog_adoptions %>%
group_by(council_district)%>%
ggplot(aes(x=as.factor(council_district))) +
geom_bar()
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district))) +
geom_bar()
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district))) +
geom_bar(position = "fill")
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district), fill = out_dead)) +
geom_bar(position = "fill")
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district), y = out_dead)) +
geom_bar(position = "fill", stat = "identity")
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district), y = sum(out_dead))) +
geom_bar(position = "fill", stat = "identity")
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district), y = sum(out_dead))) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
ggplot(aes(x=as.factor(council_district), y = sum(out_dead)/n())) +
geom_bar(stat = "identity")
ggplot(aes(x=as.factor(council_district), y = prop_dead) +
just_dog_adoptions %>%
group_by(council_district)%>%
mutate(prop_dead = sum(out_dead)/n())%>%
ggplot(aes(x=as.factor(council_district), y = prop_dead)) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
group_by(council_district)%>%
mutate(prop_dead = sum(out_dead)/n())
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_dead = sum(out_dead)/n())%>%
ggplot(aes(x=as.factor(council_district), y = prop_dead)) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_dead = sum(out_dead, na.rm = TRUE)/n())%>%
ggplot(aes(x=as.factor(council_district), y = prop_dead)) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_dead = sum(out_dead, na.rm = FALSE)/n())%>%
ggplot(aes(x=as.factor(council_district), y = prop_dead)) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_dead = sum(out_dead)/n())%>%
filter(!is.na(council_district))
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_dead = sum(out_dead)/n())%>%
filter(!is.na(council_district)) %>%
ggplot(aes(x=as.factor(council_district), y = prop_dead)) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_adopted = sum(adopted)/n())%>%
filter(!is.na(council_district)) %>%
ggplot(aes(x=as.factor(council_district), y = prop_adopted)) +
geom_bar(stat = "identity")
pitbull_model3_quasi$aic
pitbull_model3_quasi$offset
pitbull_model3_quasi$R
pitbull_model3_quasi$effects
pitbull_model3_quasi$coefficients
pitbull_model3_quasi$fitted.values
pitbull_model3_quasi$effects
pitbull_model1_quasi <- glm(prop_dead ~ pitbull + chip_status + summer , weights = count, family = quasibinomial, data = pitbull_binom)
pitbull_model2_quasi <- glm(prop_dead ~ pitbull + chip_status +
summer + contagious , weights = count,
family = quasibinomial, data = pitbull_binom)
pitbull_model3_quasi <- glm(prop_dead ~ pitbull + chip_status +
summer + contagious + treatable , weights = count,
family = quasibinomial, data = pitbull_binom)
summary(pitbull_model1_quasi)
summary(pitbull_model2_quasi)
summary(pitbull_model3_quasi)
coef(pitbull_model1_quasi),4
coef(pitbull_model1_quasi)[,4]
coef(pitbull_model1_quasi)
coef(summary(pitbull_model1_quasi))[,4]
stargazer(pitbull_model1_quasi, pitbull_model2_quasi, pitbull_model3_quasi,
title="Modeling Dog Outcomes in Dallas Animal Shelters",
align=TRUE,
apply.coef = exp,
ci=TRUE,
ci.custom = list(ci.func(pitbull_model1_quasi),
ci.func(pitbull_model2_quasi),
ci.func(pitbull_model3_quasi)),
dep.var.labels=c("Proportion of dogs who died"),
header=FALSE,
type='latex',
covariate.labels = c("Intercept","Pitbull",
"Scannable Chip", "Summer Outcome",
"Contagious", "Treatable At Intake",
"Overdispersion Parameter"),
intercept.bottom = FALSE,
omit.stat = "n",
p = list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi)),
add.lines = c("139.72", "111.46",  "6.27"))
p.func <- function(model){
coef(summary(model))[,4]
}
stargazer(pitbull_model1_quasi, pitbull_model2_quasi, pitbull_model3_quasi,
title="Modeling Dog Outcomes in Dallas Animal Shelters",
align=TRUE,
apply.coef = exp,
ci=TRUE,
ci.custom = list(ci.func(pitbull_model1_quasi),
ci.func(pitbull_model2_quasi),
ci.func(pitbull_model3_quasi)),
dep.var.labels=c("Proportion of dogs who died"),
header=FALSE,
type='latex',
covariate.labels = c("Intercept","Pitbull",
"Scannable Chip", "Summer Outcome",
"Contagious", "Treatable At Intake",
"Overdispersion Parameter"),
intercept.bottom = FALSE,
omit.stat = "n",
p = list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi)),
add.lines = c("139.72", "111.46",  "6.27"))
list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi))
coef(summary(pitbull_model1_quasi))[,4]
coef(summary(pitbull_model1_quasi))[,4][1]
coef(summary(pitbull_model1_quasi))[[,4]]
coef(summary(pitbull_model1_quasi))[[,4]]
ci.func(pitbull_model1_quasi)
list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi))
summary(pitbull_model2_quasi)
pitbull_binom <- adoptions %>%
filter(!str_detect(intake_subtype, "(DEAD)|(DIED)")) %>%
filter(dog == 1) %>%
mutate(out_dead = outcome_type %in% c("DEAD ON ARRIVAL", "EUTHANIZED", "DIED"),
summer = ifelse(month %in% c(5, 6, 7, 8, 9), 1, 0),
chip_status = ifelse(chip_status=="SCAN CHIP", 1, 0),
contagious=ifelse(grepl(".*[^NON-]CONTAGIOUS", intake_condition),1,0),
treatable=ifelse(grepl("^TREATABLE.*", intake_condition),1,0)) %>%
group_by(pitbull, chip_status, summer, contagious, treatable) %>%
summarize(prop_dead = sum(out_dead)/n(), count = n())
pitbull_model1_quasi <- glm(prop_dead ~ pitbull + chip_status + summer , weights = count, family = quasibinomial, data = pitbull_binom)
pitbull_model2_quasi <- glm(prop_dead ~ pitbull + chip_status +
summer + contagious , weights = count,
family = quasibinomial, data = pitbull_binom)
pitbull_model3_quasi <- glm(prop_dead ~ pitbull + chip_status +
summer + contagious + treatable , weights = count,
family = quasibinomial, data = pitbull_binom)
#### TABLE ####
ci.func <- function(model){
exp(confint(model))
}
p.func <- function(model){
coef(summary(model))[,4]
}
summary(pitbull_model2_quasi)
library(tidyverse)
library(readr)
library(lubridate)
library(kableExtra)
library(knitr)
library(stargazer)
adoptions <- read_csv("adoptions.csv")
set.seed(112233)
pitbull_binom <- adoptions %>%
filter(!str_detect(intake_subtype, "(DEAD)|(DIED)")) %>%
filter(dog == 1) %>%
mutate(out_dead = outcome_type %in% c("DEAD ON ARRIVAL", "EUTHANIZED", "DIED"),
summer = ifelse(month %in% c(5, 6, 7, 8, 9), 1, 0),
chip_status = ifelse(chip_status=="SCAN CHIP", 1, 0),
contagious=ifelse(grepl(".*[^NON-]CONTAGIOUS", intake_condition),1,0),
treatable=ifelse(grepl("^TREATABLE.*", intake_condition),1,0)) %>%
group_by(pitbull, chip_status, summer, contagious, treatable) %>%
summarize(prop_dead = sum(out_dead)/n(), count = n())
pitbull_model1_quasi <- glm(prop_dead ~ pitbull + chip_status + summer , weights = count, family = quasibinomial, data = pitbull_binom)
pitbull_model2_quasi <- glm(prop_dead ~ pitbull + chip_status +
summer + contagious , weights = count,
family = quasibinomial, data = pitbull_binom)
pitbull_model3_quasi <- glm(prop_dead ~ pitbull + chip_status +
summer + contagious + treatable , weights = count,
family = quasibinomial, data = pitbull_binom)
list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi)
)
coef(summary(model))[,4]
p.func <- function(model){
coef(summary(model))[,4]
}
list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi))
summary(pitbull_model2_quasi)
exp(confint(pitbull_model2_quasi))
list(p.func(pitbull_model1_quasi),
p.func(pitbull_model2_quasi),
p.func(pitbull_model3_quasi))
list(ci.func(pitbull_model1_quasi),
ci.func(pitbull_model2_quasi),
ci.func(pitbull_model3_quasi))
#### TABLE ####
ci.func <- function(model){
exp(confint(model))
}
list(ci.func(pitbull_model1_quasi),
ci.func(pitbull_model2_quasi),
ci.func(pitbull_model3_quasi))
p.func(pitbull_model1_quasi)
t(p.func(pitbull_model1_quasi))
str(p.func(pitbull_model1_quasi))
typeof(p.func(pitbull_model1_quasi))
as.vector(p.func(pitbull_model1_quasi))
anova(pitbull_model1_quasi, pitbull_model2_quasi, test = "F")
anova(pitbull_model2_quasi, pitbull_model3_quasi, test = "F")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
library(readr)
library(lubridate)
library(lme4)
library(kableExtra)
library(knitr)
adoptions <- read_csv("adoptions.csv")
just_dog_adoptions=adoptions%>%
filter(animal_type=="DOG")%>%
mutate(animal_breed=as.factor(animal_breed))%>%
mutate(healthy_intake=ifelse(grepl("^HEALTHY.*",intake_condition),1,0),
contagious_intake=ifelse(grepl(".*[^NON-]CONTAGIOUS", intake_condition),1,0),
untreatable_intake=ifelse(grepl(".*(UNTREATABLE).*", intake_condition),1,0),
treatable_intake=ifelse(grepl("^TREATABLE.*", intake_condition),1,0),
manageable_intake=ifelse(grepl(".*MANAGEABLE.*", intake_condition),1,0),
rehabitable_intake=ifelse(grepl(".*REHABILITABLE.*", intake_condition),1,0),
normal_intake=ifelse(grepl(".*NORMAL.*", intake_condition),1,0),
chip_status = ifelse(chip_status=="SCAN CHIP", 1, 0))%>% #Isaac added this just to see how models change
mutate(out_dead = outcome_type %in% c("DEAD ON ARRIVAL", "EUTHANIZED", "DIED"),
summer = ifelse(month %in% c(5, 6, 7, 8, 9), 1, 0))
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_dead = sum(out_dead)/n())%>%
filter(!is.na(council_district))%>%
ggplot(aes(x=as.factor(council_district), y = prop_dead)) +
geom_bar(stat = "identity")
just_dog_adoptions %>%
group_by(council_district)%>%
summarise(prop_adopted = sum(adopted)/n())%>%
filter(!is.na(council_district)) %>%
ggplot(aes(x=as.factor(council_district), y = prop_adopted)) +
geom_bar(stat = "identity")
library(stargazer)
ranef(mod.1_dead)
mod.1_dead=glmer(out_dead~1+(1|council_district), data=just_dog_adoptions, family = "binomial")
ranef(mod.1_dead)
summary(mod.1_dead)
mod.2.dead=glmer(out_dead~summer+chip_status+treatable_intake+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.2.dead)
mod.2.dead
mod.2.dead$random
str(mod.2.dead)
mod.2.dead$predvars.random
mod.2.dead[2]
summary(mod.2.dead)
a = summary(mod.2.dead)
a$sigma
a$coefficients
a$vcov
a$methTitle
a$varcor
rand.sigma <- function(model){
summary(model)$varcor[,3]
}
rand.sigma(mod.2.dead)
rand.sigma <- function(model){
summary(model)$varcor
}
rand.sigma(mod.2.dead)
rand.sigma(mod.2.dead)[3]
rand.sigma(mod.2.dead)[,3]
rand.sigma(mod.2.dead)[,2]
rand.sigma(mod.2.dead)[1][,2]
rand.sigma(mod.2.dead)[1]
str(rand.sigma(mod.2.dead))
rand.sigma(mod.2.dead)
a= rand.sigma(mod.2.dead)
a$council_district
a[3]
a[,3]
a[1]
a[1,3]
a[1][1]
a[[1]]
class(a)
a
as.vector(a)
a= as.vector(a)
a[3]
a[,3]
str(a)
str(a[[1]])
summary(model)$varcor[[1]]
rand.sigma <- function(model){
summary(model)$varcor[[1]]
}
rand.sigma(mod.2.dead)
rand.sigma(mod.2.dead)+1
rand.sigma(mod.2.dead)[1]
rand.sigma(mod.2.dead)
rand.sigma(mod.2.dead)[1]
rand.sigma <- function(model){
summary(model)$varcor[[1]][1][1]
}
rand.sigma(mod.2.dead)
mod.1_dead
mod.2.dead
confint(mod.2.dead)
summary(mod.1_dead)
just_dog_adoptions=adoptions%>%
filter(animal_type=="DOG")%>%
mutate(animal_breed=as.factor(animal_breed))%>%
mutate(healthy_intake=ifelse(grepl("^HEALTHY.*",intake_condition),1,0),
contagious_intake=ifelse(grepl(".*[^NON-]CONTAGIOUS", intake_condition),1,0),
untreatable_intake=ifelse(grepl(".*(UNTREATABLE).*", intake_condition),1,0),
treatable_intake=ifelse(grepl("^TREATABLE.*", intake_condition),1,0),
manageable_intake=ifelse(grepl(".*MANAGEABLE.*", intake_condition),1,0),
rehabitable_intake=ifelse(grepl(".*REHABILITABLE.*", intake_condition),1,0),
normal_intake=ifelse(grepl(".*NORMAL.*", intake_condition),1,0),
chip_status = ifelse(chip_status=="SCAN CHIP", 1, 0))%>% #Isaac added this just to see how models change
mutate(out_dead = outcome_type %in% c("DEAD ON ARRIVAL", "EUTHANIZED", "DIED"),
summer = ifelse(month %in% c(5, 6, 7, 8, 9), 1, 0))
mod.1=glmer(adopted~1+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.1)
exp(fixef(mod.1))/(1+exp(fixef(mod.1)))
mod.1_dead=glmer(out_dead~1+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.1_dead)
exp(fixef(mod.1_dead))/(1+exp(fixef(mod.1_dead)))
mod.2.adopted=glmer(adopted~summer+chip_status+treatable_intake+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.2.adopted)
exp(fixef(mod.2.adopted))
exp(fixef(mod.2.adopted))/(1+exp(fixef(mod.2.adopted)))
mod.2.dead=glmer(out_dead~summer+chip_status+treatable_intake+(1|council_district), data=just_dog_adoptions, family = "binomial")
summary(mod.2.dead)
exp(fixef(mod.2.dead))
exp(fixef(mod.2.dead))/(1+exp(fixef(mod.2.dead)))
summary(mod.1)
summary(mod.2.adopted)
summary(mod.1_dead)
mod.2.dead
mod.2.adopted
mod.1_dead
mod.1
mod.1_dead
mod.1_dead
mod.1_dead
mod.1
mod.1
mod.1_dead
mod.2.dead
mod.2.dead
mod.2.adopted
